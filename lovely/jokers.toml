[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

## Chameleon tooltip
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''return generate_card_ui(self.config.center, nil, loc_vars, card_type, badges, hide_desc, main_start, main_end)'''
position = 'before'
match_indent = true
payload = '''if value == 'ortalab_chameleon' then return loc_vars end'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''function Card:generate_UIBox_ability_table()'''
position = 'at'
match_indent = true
payload = '''function Card:generate_UIBox_ability_table(value)'''

# Black Friday discount
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''G.GAME.discount_percent = center_table.extra'''
position = "after"
match_indent = true
payload = '''
--Ortalab/Jokers/Black Friday
local results = SMODS.find_card('j_ortalab_black_friday')
for _, card in ipairs(results) do
    G.GAME.discount_percent = G.GAME.discount_percent + card.ability.extra.money_off
    sendDebugMessage('test')
end
'''


# Mysterium hand list population
#Inject for start up
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''boot_timer('splash prep', 'end',1)'''
position = "after"
payload = '''
--Ortalab/Jokers/The Mysterium
if (SMODS.Mods['ortalab'] or {}).can_load then
    for k, v in pairs(G.GAME.hands) do
        if v.visible == false then G.P_CENTERS['j_ortalab_mysterium'].config.extra.secret_hand_list[#G.P_CENTERS['j_ortalab_mysterium'].config.extra.secret_hand_list+1] = k end
    end
end
'''
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''G.FUNCS.evaluate_play()'''
position = "at"
payload = '''
G.GAME.Ortalab_Scoring_Active = true
G.FUNCS.evaluate_play()
G.GAME.Ortalab_Scoring_Active = false
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if effects[ii].message then'''
position = "before"
payload = '''
if effects[ii].chips then 
    mod_percent = true
    hand_chips = mod_chips(hand_chips + effects[ii].chips)
    update_hand_text({delay = 0}, {chips = hand_chips})
    card_eval_status_text(G.hand.cards[i], 'chips', effects[ii].chips, percent)
end
'''
match_indent = true

## Demo Card Badges
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''badges[#badges + 1] = create_badge(((card.ability.name == 'Pluto' or card.ability.name == 'Ceres' or card.ability.name == 'Eris') and localize('k_dwarf_planet')) or (card.ability.name == 'Planet X' and localize('k_planet_q') or card_type),card_type_colour, nil, 1.2)'''
position = 'after'
match_indent = true
payload = '''if card.config.center.ortalab_demo_card then badges = {}; end'''

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''reset_idol_card()'''
position = "before"
payload = '''
for i = 1, #G.jokers.cards do
    if G.jokers.cards[i].ability.shinku then
        G.E_MANAGER:add_event(Event({
            func = function() 
                G.jokers.cards[i]:start_dissolve()
                return true
        end}))   
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if first_pass and not (_c.set == 'Edition') and badges then'''
position = "before"
payload = '''
if specific_vars and specific_vars.shinku then
    info_queue[#info_queue + 1] = {generate_ui = ortalab_artist_tooltip, key = 'shinku', title = 'Shinku'}
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''return generate_card_ui(self.config.center, nil, loc_vars, card_type, badges, hide_desc, main_start, main_end)'''
position = "before"
payload = '''
if self.ability.shinku then 
    if loc_vars then
        loc_vars.shinku = true
    else
        loc_vars = {shinku = true}
    end
end'''
match_indent = true